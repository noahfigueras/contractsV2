/**
 * Fork code name in order of occurrence
 */
export declare enum ForkName {
    phase0 = "phase0",
    altair = "altair",
    bellatrix = "bellatrix",
    capella = "capella",
    deneb = "deneb"
}
/**
 * Fork sequence number in order of occurrence
 */
export declare enum ForkSeq {
    phase0 = 0,
    altair = 1,
    bellatrix = 2,
    capella = 3,
    deneb = 4
}
export type ForkPreLightClient = ForkName.phase0;
export type ForkLightClient = Exclude<ForkName, ForkPreLightClient>;
export declare function isForkLightClient(fork: ForkName): fork is ForkLightClient;
export type ForkPreExecution = ForkPreLightClient | ForkName.altair;
export type ForkExecution = Exclude<ForkName, ForkPreExecution>;
export declare function isForkExecution(fork: ForkName): fork is ForkExecution;
export type ForkPreWithdrawals = ForkPreExecution | ForkName.bellatrix;
export type ForkWithdrawals = Exclude<ForkName, ForkPreWithdrawals>;
export declare function isForkWithdrawals(fork: ForkName): fork is ForkWithdrawals;
export type ForkPreBlobs = ForkPreWithdrawals | ForkName.capella;
export type ForkBlobs = Exclude<ForkName, ForkPreBlobs>;
export declare function isForkBlobs(fork: ForkName): fork is ForkBlobs;
//# sourceMappingURL=forkName.d.ts.map