/**
 * Index the ssz types that differ by fork
 * A record of AllForksSSZTypes indexed by fork
 */
export declare const allForks: {
    phase0: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochAttestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                inclusionDelay: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
            currentEpochAttestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                inclusionDelay: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Metadata: import("@chainsafe/ssz").ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
        }>;
    };
    altair: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Metadata: import("@chainsafe/ssz").ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
    };
    bellatrix: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Metadata: import("@chainsafe/ssz").ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
    };
    capella: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("../utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        Metadata: import("@chainsafe/ssz").ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
    };
    deneb: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("../utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        Metadata: import("@chainsafe/ssz").ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
    };
};
/**
 * Index the execution ssz types that differ by fork
 * A record of AllForksExecutionSSZTypes indexed by fork
 */
export declare const allForksExecution: {
    bellatrix: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ExecutionPayload: import("@chainsafe/ssz").ContainerType<{
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributes: import("@chainsafe/ssz").ContainerType<{
            payloadAttributes: import("@chainsafe/ssz").ContainerType<{
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("../index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    capella: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("../utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        ExecutionPayload: import("@chainsafe/ssz").ContainerType<{
            withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("../utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributes: import("@chainsafe/ssz").ContainerType<{
            payloadAttributes: import("@chainsafe/ssz").ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("../index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    deneb: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayload: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("../utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconState: import("@chainsafe/ssz").ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: import("@chainsafe/ssz").ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                effectiveBalance: import("@chainsafe/ssz").UintNumberType;
                slashed: import("@chainsafe/ssz").BooleanType;
                activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
                activationEpoch: import("@chainsafe/ssz").UintNumberType;
                exitEpoch: import("@chainsafe/ssz").UintNumberType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        ExecutionPayload: import("@chainsafe/ssz").ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("../utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributes: import("@chainsafe/ssz").ContainerType<{
            payloadAttributes: import("@chainsafe/ssz").ContainerType<{
                parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("../index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
};
/**
 * Index the blinded ssz types that differ by fork
 * A record of AllForksBlindedSSZTypes indexed by fork
 */
export declare const allForksBlinded: {
    bellatrix: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    capella: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    deneb: {
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                body: import("@chainsafe/ssz").ContainerType<{
                    executionPayloadHeader: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: import("@chainsafe/ssz").ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: import("@chainsafe/ssz").ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        signedHeader1: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: import("@chainsafe/ssz").ContainerType<{
                            message: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        attestation1: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: import("@chainsafe/ssz").ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: import("@chainsafe/ssz").ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: import("@chainsafe/ssz").ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
};
export declare const allForksLightClient: {
    altair: {
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        LightClientHeader: import("@chainsafe/ssz").ContainerType<{
            beacon: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        LightClientBootstrap: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: import("@chainsafe/ssz").ContainerType<{
            snapshot: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
    };
    bellatrix: {
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        LightClientHeader: import("@chainsafe/ssz").ContainerType<{
            beacon: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        LightClientBootstrap: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: import("@chainsafe/ssz").ContainerType<{
            snapshot: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
    };
    capella: {
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        LightClientHeader: import("@chainsafe/ssz").ContainerType<{
            beacon: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: import("@chainsafe/ssz").ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientBootstrap: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: import("@chainsafe/ssz").ContainerType<{
            snapshot: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
    };
    deneb: {
        BeaconBlock: import("@chainsafe/ssz").ContainerType<{
            body: import("@chainsafe/ssz").ContainerType<{
                executionPayload: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("../utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: import("@chainsafe/ssz").ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    signedHeader1: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: import("@chainsafe/ssz").ContainerType<{
                        message: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    attestation1: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: import("@chainsafe/ssz").ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: import("@chainsafe/ssz").ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: import("@chainsafe/ssz").ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: import("@chainsafe/ssz").ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: import("@chainsafe/ssz").ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        LightClientHeader: import("@chainsafe/ssz").ContainerType<{
            beacon: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientBootstrap: import("@chainsafe/ssz").ContainerType<{
            header: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: import("@chainsafe/ssz").ContainerType<{
            attestedHeader: import("@chainsafe/ssz").ContainerType<{
                beacon: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: import("@chainsafe/ssz").ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: import("@chainsafe/ssz").ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: import("@chainsafe/ssz").ContainerType<{
            snapshot: import("@chainsafe/ssz").ContainerType<{
                header: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                attestedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: import("@chainsafe/ssz").ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: import("@chainsafe/ssz").ContainerType<{
                    beacon: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: import("@chainsafe/ssz").ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: import("@chainsafe/ssz").ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
    };
};
export declare const allForksBlobs: {
    deneb: {
        BlobSidecar: import("@chainsafe/ssz").ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: import("@chainsafe/ssz").ContainerType<{
                message: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        ExecutionPayloadAndBlobsBundle: import("@chainsafe/ssz").ContainerType<{
            executionPayload: import("@chainsafe/ssz").ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobsBundle: import("@chainsafe/ssz").ContainerType<{
                commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
        }>;
    };
};
//# sourceMappingURL=sszTypes.d.ts.map