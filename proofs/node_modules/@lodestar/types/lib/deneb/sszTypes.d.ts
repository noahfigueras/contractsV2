import { ContainerType, ListCompositeType, ByteVectorType, VectorCompositeType } from "@chainsafe/ssz";
export declare const G1Point: ByteVectorType;
export declare const G2Point: ByteVectorType;
export declare const BLSFieldElement: ByteVectorType;
export declare const KZGCommitment: ByteVectorType;
export declare const KZGProof: ByteVectorType;
export declare const Blob: ByteVectorType;
export declare const Blobs: ListCompositeType<ByteVectorType>;
export declare const BlindedBlob: ByteVectorType;
export declare const BlindedBlobs: ListCompositeType<ByteVectorType>;
export declare const VersionedHash: ByteVectorType;
export declare const BlobKzgCommitments: ListCompositeType<ByteVectorType>;
export declare const KZGProofs: ListCompositeType<ByteVectorType>;
export declare const BlobSidecarsByRangeRequest: ContainerType<{
    startSlot: import("@chainsafe/ssz").UintNumberType;
    count: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const BlobIdentifier: ContainerType<{
    blockRoot: ByteVectorType;
    index: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const BlobSidecarsByRootRequest: ListCompositeType<ContainerType<{
    blockRoot: ByteVectorType;
    index: import("@chainsafe/ssz").UintNumberType;
}>>;
export declare const ExecutionPayload: ContainerType<{
    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
    withdrawals: ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("../utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    transactions: ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    parentHash: ByteVectorType;
    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
    stateRoot: ByteVectorType;
    receiptsRoot: ByteVectorType;
    logsBloom: ByteVectorType;
    prevRandao: ByteVectorType;
    blockNumber: import("@chainsafe/ssz").UintNumberType;
    gasLimit: import("@chainsafe/ssz").UintNumberType;
    gasUsed: import("@chainsafe/ssz").UintNumberType;
    timestamp: import("@chainsafe/ssz").UintNumberType;
    extraData: import("@chainsafe/ssz").ByteListType;
    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
    blockHash: ByteVectorType;
}>;
export declare const ExecutionPayloadHeader: ContainerType<{
    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
    withdrawalsRoot: ByteVectorType;
    transactionsRoot: ByteVectorType;
    parentHash: ByteVectorType;
    feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
    stateRoot: ByteVectorType;
    receiptsRoot: ByteVectorType;
    logsBloom: ByteVectorType;
    prevRandao: ByteVectorType;
    blockNumber: import("@chainsafe/ssz").UintNumberType;
    gasLimit: import("@chainsafe/ssz").UintNumberType;
    gasUsed: import("@chainsafe/ssz").UintNumberType;
    timestamp: import("@chainsafe/ssz").UintNumberType;
    extraData: import("@chainsafe/ssz").ByteListType;
    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
    blockHash: ByteVectorType;
}>;
export declare const BeaconBlockBody: ContainerType<{
    executionPayload: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawals: ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("../utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    blsToExecutionChanges: ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: ByteVectorType;
            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: ByteVectorType;
    }>>;
    blobKzgCommitments: ListCompositeType<ByteVectorType>;
    syncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: ByteVectorType;
    }>;
    randaoReveal: ByteVectorType;
    eth1Data: ContainerType<{
        depositRoot: ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: ByteVectorType;
    }>;
    graffiti: ByteVectorType;
    proposerSlashings: ListCompositeType<ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            signature: ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            signature: ByteVectorType;
        }>;
    }>>;
    attesterSlashings: ListCompositeType<ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>;
    }>>;
    attestations: ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: ByteVectorType;
            }>;
        }>;
        signature: ByteVectorType;
    }>>;
    deposits: ListCompositeType<ContainerType<{
        proof: VectorCompositeType<ByteVectorType>;
        data: ContainerType<{
            pubkey: ByteVectorType;
            withdrawalCredentials: ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: ByteVectorType;
        }>;
    }>>;
    voluntaryExits: ListCompositeType<ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: ByteVectorType;
    }>>;
}>;
export declare const BeaconBlock: ContainerType<{
    body: ContainerType<{
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("../utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        blsToExecutionChanges: ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: ByteVectorType;
                toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: ByteVectorType;
        }>>;
        blobKzgCommitments: ListCompositeType<ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: ByteVectorType;
        }>;
        randaoReveal: ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: ByteVectorType;
        }>;
        graffiti: ByteVectorType;
        proposerSlashings: ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: ByteVectorType;
                    stateRoot: ByteVectorType;
                    bodyRoot: ByteVectorType;
                }>;
                signature: ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: ByteVectorType;
                    stateRoot: ByteVectorType;
                    bodyRoot: ByteVectorType;
                }>;
                signature: ByteVectorType;
            }>;
        }>>;
        attesterSlashings: ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>;
        }>>;
        attestations: ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>>;
        deposits: ListCompositeType<ContainerType<{
            proof: VectorCompositeType<ByteVectorType>;
            data: ContainerType<{
                pubkey: ByteVectorType;
                withdrawalCredentials: ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: ByteVectorType;
            }>;
        }>>;
        voluntaryExits: ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: ByteVectorType;
        }>>;
    }>;
    slot: import("@chainsafe/ssz").UintNumberType;
    proposerIndex: import("@chainsafe/ssz").UintNumberType;
    parentRoot: ByteVectorType;
    stateRoot: ByteVectorType;
}>;
export declare const SignedBeaconBlock: ContainerType<{
    message: ContainerType<{
        body: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("../utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: ByteVectorType;
                receiptsRoot: ByteVectorType;
                logsBloom: ByteVectorType;
                prevRandao: ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: ByteVectorType;
            }>;
            blsToExecutionChanges: ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: ByteVectorType;
            }>>;
            blobKzgCommitments: ListCompositeType<ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: ByteVectorType;
            }>;
            randaoReveal: ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: ByteVectorType;
            }>;
            graffiti: ByteVectorType;
            proposerSlashings: ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: ByteVectorType;
                        stateRoot: ByteVectorType;
                        bodyRoot: ByteVectorType;
                    }>;
                    signature: ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: ByteVectorType;
                        stateRoot: ByteVectorType;
                        bodyRoot: ByteVectorType;
                    }>;
                    signature: ByteVectorType;
                }>;
            }>>;
            attesterSlashings: ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                    }>;
                    signature: ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                    }>;
                    signature: ByteVectorType;
                }>;
            }>>;
            attestations: ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>>;
            deposits: ListCompositeType<ContainerType<{
                proof: VectorCompositeType<ByteVectorType>;
                data: ContainerType<{
                    pubkey: ByteVectorType;
                    withdrawalCredentials: ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: ByteVectorType;
                }>;
            }>>;
            voluntaryExits: ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: ByteVectorType;
            }>>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: ByteVectorType;
        stateRoot: ByteVectorType;
    }>;
    signature: ByteVectorType;
}>;
export declare const KzgCommitmentInclusionProof: VectorCompositeType<ByteVectorType>;
export declare const BlobSidecar: ContainerType<{
    index: import("@chainsafe/ssz").UintNumberType;
    blob: ByteVectorType;
    kzgCommitment: ByteVectorType;
    kzgProof: ByteVectorType;
    signedBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        signature: ByteVectorType;
    }>;
    kzgCommitmentInclusionProof: VectorCompositeType<ByteVectorType>;
}>;
export declare const BlobSidecars: ListCompositeType<ContainerType<{
    index: import("@chainsafe/ssz").UintNumberType;
    blob: ByteVectorType;
    kzgCommitment: ByteVectorType;
    kzgProof: ByteVectorType;
    signedBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        signature: ByteVectorType;
    }>;
    kzgCommitmentInclusionProof: VectorCompositeType<ByteVectorType>;
}>>;
export declare const BlobsBundle: ContainerType<{
    commitments: ListCompositeType<ByteVectorType>;
    proofs: ListCompositeType<ByteVectorType>;
    blobs: ListCompositeType<ByteVectorType>;
}>;
export declare const BlindedBeaconBlockBody: ContainerType<{
    executionPayloadHeader: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: ByteVectorType;
        transactionsRoot: ByteVectorType;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    blsToExecutionChanges: ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: ByteVectorType;
            toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: ByteVectorType;
    }>>;
    blobKzgCommitments: ListCompositeType<ByteVectorType>;
    syncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: ByteVectorType;
    }>;
    randaoReveal: ByteVectorType;
    eth1Data: ContainerType<{
        depositRoot: ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: ByteVectorType;
    }>;
    graffiti: ByteVectorType;
    proposerSlashings: ListCompositeType<ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            signature: ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            signature: ByteVectorType;
        }>;
    }>>;
    attesterSlashings: ListCompositeType<ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>;
    }>>;
    attestations: ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: ByteVectorType;
            }>;
        }>;
        signature: ByteVectorType;
    }>>;
    deposits: ListCompositeType<ContainerType<{
        proof: VectorCompositeType<ByteVectorType>;
        data: ContainerType<{
            pubkey: ByteVectorType;
            withdrawalCredentials: ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: ByteVectorType;
        }>;
    }>>;
    voluntaryExits: ListCompositeType<ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: ByteVectorType;
    }>>;
}>;
export declare const BlindedBeaconBlock: ContainerType<{
    body: ContainerType<{
        executionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        blsToExecutionChanges: ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: ByteVectorType;
                toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: ByteVectorType;
        }>>;
        blobKzgCommitments: ListCompositeType<ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: ByteVectorType;
        }>;
        randaoReveal: ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: ByteVectorType;
        }>;
        graffiti: ByteVectorType;
        proposerSlashings: ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: ByteVectorType;
                    stateRoot: ByteVectorType;
                    bodyRoot: ByteVectorType;
                }>;
                signature: ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: ByteVectorType;
                    stateRoot: ByteVectorType;
                    bodyRoot: ByteVectorType;
                }>;
                signature: ByteVectorType;
            }>;
        }>>;
        attesterSlashings: ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>;
        }>>;
        attestations: ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: ByteVectorType;
                }>;
            }>;
            signature: ByteVectorType;
        }>>;
        deposits: ListCompositeType<ContainerType<{
            proof: VectorCompositeType<ByteVectorType>;
            data: ContainerType<{
                pubkey: ByteVectorType;
                withdrawalCredentials: ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: ByteVectorType;
            }>;
        }>>;
        voluntaryExits: ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: ByteVectorType;
        }>>;
    }>;
    slot: import("@chainsafe/ssz").UintNumberType;
    proposerIndex: import("@chainsafe/ssz").UintNumberType;
    parentRoot: ByteVectorType;
    stateRoot: ByteVectorType;
}>;
export declare const SignedBlindedBeaconBlock: ContainerType<{
    message: ContainerType<{
        body: ContainerType<{
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: ByteVectorType;
                transactionsRoot: ByteVectorType;
                parentHash: ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: ByteVectorType;
                receiptsRoot: ByteVectorType;
                logsBloom: ByteVectorType;
                prevRandao: ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: ByteVectorType;
            }>;
            blsToExecutionChanges: ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: ByteVectorType;
                    toExecutionAddress: import("../utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: ByteVectorType;
            }>>;
            blobKzgCommitments: ListCompositeType<ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: ByteVectorType;
            }>;
            randaoReveal: ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: ByteVectorType;
            }>;
            graffiti: ByteVectorType;
            proposerSlashings: ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: ByteVectorType;
                        stateRoot: ByteVectorType;
                        bodyRoot: ByteVectorType;
                    }>;
                    signature: ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: ByteVectorType;
                        stateRoot: ByteVectorType;
                        bodyRoot: ByteVectorType;
                    }>;
                    signature: ByteVectorType;
                }>;
            }>>;
            attesterSlashings: ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                    }>;
                    signature: ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: ByteVectorType;
                        }>;
                    }>;
                    signature: ByteVectorType;
                }>;
            }>>;
            attestations: ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: ByteVectorType;
                    }>;
                }>;
                signature: ByteVectorType;
            }>>;
            deposits: ListCompositeType<ContainerType<{
                proof: VectorCompositeType<ByteVectorType>;
                data: ContainerType<{
                    pubkey: ByteVectorType;
                    withdrawalCredentials: ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: ByteVectorType;
                }>;
            }>>;
            voluntaryExits: ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: ByteVectorType;
            }>>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: ByteVectorType;
        stateRoot: ByteVectorType;
    }>;
    signature: ByteVectorType;
}>;
export declare const BuilderBid: ContainerType<{
    header: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: ByteVectorType;
        transactionsRoot: ByteVectorType;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    blobKzgCommitments: ListCompositeType<ByteVectorType>;
    value: import("@chainsafe/ssz").UintBigintType;
    pubkey: ByteVectorType;
}>;
export declare const SignedBuilderBid: ContainerType<{
    message: ContainerType<{
        header: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        blobKzgCommitments: ListCompositeType<ByteVectorType>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: ByteVectorType;
    }>;
    signature: ByteVectorType;
}>;
export declare const ExecutionPayloadAndBlobsBundle: ContainerType<{
    executionPayload: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawals: ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("../utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    blobsBundle: ContainerType<{
        commitments: ListCompositeType<ByteVectorType>;
        proofs: ListCompositeType<ByteVectorType>;
        blobs: ListCompositeType<ByteVectorType>;
    }>;
}>;
export declare const BeaconState: ContainerType<{
    genesisTime: import("@chainsafe/ssz").UintNumberType;
    genesisValidatorsRoot: ByteVectorType;
    slot: import("@chainsafe/ssz").UintNumberType;
    fork: ContainerType<{
        previousVersion: ByteVectorType;
        currentVersion: ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    latestBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: ByteVectorType;
        stateRoot: ByteVectorType;
        bodyRoot: ByteVectorType;
    }>;
    blockRoots: VectorCompositeType<ByteVectorType>;
    stateRoots: VectorCompositeType<ByteVectorType>;
    historicalRoots: ListCompositeType<ByteVectorType>;
    eth1Data: ContainerType<{
        depositRoot: ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: ByteVectorType;
    }>;
    eth1DataVotes: ListCompositeType<ContainerType<{
        depositRoot: ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: ByteVectorType;
    }>>;
    eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
    validators: ListCompositeType<import("@chainsafe/ssz").ContainerNodeStructType<{
        pubkey: ByteVectorType;
        withdrawalCredentials: ByteVectorType;
        effectiveBalance: import("@chainsafe/ssz").UintNumberType;
        slashed: import("@chainsafe/ssz").BooleanType;
        activationEligibilityEpoch: import("@chainsafe/ssz").UintNumberType;
        activationEpoch: import("@chainsafe/ssz").UintNumberType;
        exitEpoch: import("@chainsafe/ssz").UintNumberType;
        withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
    }>>;
    balances: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    randaoMixes: VectorCompositeType<ByteVectorType>;
    slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    justificationBits: import("@chainsafe/ssz").BitVectorType;
    previousJustifiedCheckpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: ByteVectorType;
    }>;
    currentJustifiedCheckpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: ByteVectorType;
    }>;
    finalizedCheckpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: ByteVectorType;
    }>;
    inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    currentSyncCommittee: ContainerType<{
        pubkeys: VectorCompositeType<ByteVectorType>;
        aggregatePubkey: ByteVectorType;
    }>;
    nextSyncCommittee: ContainerType<{
        pubkeys: VectorCompositeType<ByteVectorType>;
        aggregatePubkey: ByteVectorType;
    }>;
    latestExecutionPayloadHeader: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: ByteVectorType;
        transactionsRoot: ByteVectorType;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
    nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
    historicalSummaries: ListCompositeType<ContainerType<{
        blockSummaryRoot: ByteVectorType;
        stateSummaryRoot: ByteVectorType;
    }>>;
}>;
export declare const LightClientHeader: ContainerType<{
    beacon: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: ByteVectorType;
        stateRoot: ByteVectorType;
        bodyRoot: ByteVectorType;
    }>;
    execution: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: ByteVectorType;
        transactionsRoot: ByteVectorType;
        parentHash: ByteVectorType;
        feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
        stateRoot: ByteVectorType;
        receiptsRoot: ByteVectorType;
        logsBloom: ByteVectorType;
        prevRandao: ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: ByteVectorType;
    }>;
    executionBranch: VectorCompositeType<ByteVectorType>;
}>;
export declare const LightClientBootstrap: ContainerType<{
    header: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    currentSyncCommittee: ContainerType<{
        pubkeys: VectorCompositeType<ByteVectorType>;
        aggregatePubkey: ByteVectorType;
    }>;
    currentSyncCommitteeBranch: VectorCompositeType<ByteVectorType>;
}>;
export declare const LightClientUpdate: ContainerType<{
    attestedHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    nextSyncCommittee: ContainerType<{
        pubkeys: VectorCompositeType<ByteVectorType>;
        aggregatePubkey: ByteVectorType;
    }>;
    nextSyncCommitteeBranch: VectorCompositeType<ByteVectorType>;
    finalizedHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    finalityBranch: VectorCompositeType<ByteVectorType>;
    syncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: ByteVectorType;
    }>;
    signatureSlot: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const LightClientFinalityUpdate: ContainerType<{
    attestedHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    finalizedHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    finalityBranch: VectorCompositeType<ByteVectorType>;
    syncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: ByteVectorType;
    }>;
    signatureSlot: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const LightClientOptimisticUpdate: ContainerType<{
    attestedHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: ByteVectorType;
            transactionsRoot: ByteVectorType;
            parentHash: ByteVectorType;
            feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
            stateRoot: ByteVectorType;
            receiptsRoot: ByteVectorType;
            logsBloom: ByteVectorType;
            prevRandao: ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: ByteVectorType;
        }>;
        executionBranch: VectorCompositeType<ByteVectorType>;
    }>;
    syncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: ByteVectorType;
    }>;
    signatureSlot: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const LightClientStore: ContainerType<{
    snapshot: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: ByteVectorType;
                transactionsRoot: ByteVectorType;
                parentHash: ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: ByteVectorType;
                receiptsRoot: ByteVectorType;
                logsBloom: ByteVectorType;
                prevRandao: ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: ByteVectorType;
            }>;
            executionBranch: VectorCompositeType<ByteVectorType>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: VectorCompositeType<ByteVectorType>;
            aggregatePubkey: ByteVectorType;
        }>;
        currentSyncCommitteeBranch: VectorCompositeType<ByteVectorType>;
    }>;
    validUpdates: ListCompositeType<ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: ByteVectorType;
                transactionsRoot: ByteVectorType;
                parentHash: ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: ByteVectorType;
                receiptsRoot: ByteVectorType;
                logsBloom: ByteVectorType;
                prevRandao: ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: ByteVectorType;
            }>;
            executionBranch: VectorCompositeType<ByteVectorType>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: VectorCompositeType<ByteVectorType>;
            aggregatePubkey: ByteVectorType;
        }>;
        nextSyncCommitteeBranch: VectorCompositeType<ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: ByteVectorType;
                stateRoot: ByteVectorType;
                bodyRoot: ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: ByteVectorType;
                transactionsRoot: ByteVectorType;
                parentHash: ByteVectorType;
                feeRecipient: import("../utils/executionAddress.js").ExecutionAddressType;
                stateRoot: ByteVectorType;
                receiptsRoot: ByteVectorType;
                logsBloom: ByteVectorType;
                prevRandao: ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: ByteVectorType;
            }>;
            executionBranch: VectorCompositeType<ByteVectorType>;
        }>;
        finalityBranch: VectorCompositeType<ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>>;
}>;
export declare const PayloadAttributes: ContainerType<{
    parentBeaconBlockRoot: ByteVectorType;
    withdrawals: ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("../utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    timestamp: import("@chainsafe/ssz").UintNumberType;
    prevRandao: ByteVectorType;
    suggestedFeeRecipient: import("../index.js").StringType<string>;
}>;
export declare const SSEPayloadAttributes: ContainerType<{
    payloadAttributes: ContainerType<{
        parentBeaconBlockRoot: ByteVectorType;
        withdrawals: ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("../utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: ByteVectorType;
        suggestedFeeRecipient: import("../index.js").StringType<string>;
    }>;
    proposerIndex: import("@chainsafe/ssz").UintNumberType;
    proposalSlot: import("@chainsafe/ssz").UintNumberType;
    parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
    parentBlockRoot: ByteVectorType;
    parentBlockHash: ByteVectorType;
}>;
//# sourceMappingURL=sszTypes.d.ts.map