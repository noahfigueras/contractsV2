import { ssz } from "@lodestar/types";
import { isForkLightClient } from "@lodestar/params";
import { ArrayOf, Schema, reqEmpty, WithVersion, ContainerData, } from "../../utils/index.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    getUpdates: { url: "/eth/v1/beacon/light_client/updates", method: "GET" },
    getOptimisticUpdate: { url: "/eth/v1/beacon/light_client/optimistic_update", method: "GET" },
    getFinalityUpdate: { url: "/eth/v1/beacon/light_client/finality_update", method: "GET" },
    getBootstrap: { url: "/eth/v1/beacon/light_client/bootstrap/{block_root}", method: "GET" },
    getCommitteeRoot: { url: "/eth/v0/beacon/light_client/committee_root", method: "GET" },
};
export function getReqSerializers() {
    return {
        getUpdates: {
            writeReq: (start_period, count) => ({ query: { start_period, count } }),
            parseReq: ({ query }) => [query.start_period, query.count],
            schema: { query: { start_period: Schema.UintRequired, count: Schema.UintRequired } },
        },
        getOptimisticUpdate: reqEmpty,
        getFinalityUpdate: reqEmpty,
        getBootstrap: {
            writeReq: (block_root) => ({ params: { block_root } }),
            parseReq: ({ params }) => [params.block_root],
            schema: { params: { block_root: Schema.StringRequired } },
        },
        getCommitteeRoot: {
            writeReq: (start_period, count) => ({ query: { start_period, count } }),
            parseReq: ({ query }) => [query.start_period, query.count],
            schema: { query: { start_period: Schema.UintRequired, count: Schema.UintRequired } },
        },
    };
}
export function getReturnTypes() {
    // Form a TypeJson convertor for getUpdates
    const VersionedUpdate = WithVersion((fork) => isForkLightClient(fork) ? ssz.allForksLightClient[fork].LightClientUpdate : ssz.altair.LightClientUpdate);
    const getUpdates = {
        toJson: (updates) => updates.map((data) => VersionedUpdate.toJson(data)),
        fromJson: (updates) => updates.map((data) => VersionedUpdate.fromJson(data)),
    };
    return {
        getUpdates,
        getOptimisticUpdate: WithVersion((fork) => isForkLightClient(fork)
            ? ssz.allForksLightClient[fork].LightClientOptimisticUpdate
            : ssz.altair.LightClientOptimisticUpdate),
        getFinalityUpdate: WithVersion((fork) => isForkLightClient(fork)
            ? ssz.allForksLightClient[fork].LightClientFinalityUpdate
            : ssz.altair.LightClientFinalityUpdate),
        getBootstrap: WithVersion((fork) => isForkLightClient(fork) ? ssz.allForksLightClient[fork].LightClientBootstrap : ssz.altair.LightClientBootstrap),
        getCommitteeRoot: ContainerData(ArrayOf(ssz.Root)),
    };
}
//# sourceMappingURL=lightclient.js.map