import { Proof } from "@chainsafe/persistent-merkle-tree";
import { ReturnTypes, RoutesData, ReqSerializers } from "../../utils/index.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
import { ApiClientResponse } from "../../interfaces.js";
export type Api = {
    /**
     * Returns a multiproof of `descriptor` at the requested `stateId`.
     * The requested `stateId` may not be available. Regular nodes only keep recent states in memory.
     */
    getStateProof(stateId: string, descriptor: Uint8Array): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: Proof;
        };
    }>>;
    /**
     * Returns a multiproof of `descriptor` at the requested `blockId`.
     * The requested `blockId` may not be available. Regular nodes only keep recent states in memory.
     */
    getBlockProof(blockId: string, descriptor: Uint8Array): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: Proof;
        };
    }>>;
};
/**
 * Define javascript values for each route
 */
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    getStateProof: {
        params: {
            state_id: string;
        };
        query: {
            format: string;
        };
    };
    getBlockProof: {
        params: {
            block_id: string;
        };
        query: {
            format: string;
        };
    };
};
export declare function getReqSerializers(): ReqSerializers<Api, ReqTypes>;
export declare function getReturnTypes(): ReturnTypes<Api>;
//# sourceMappingURL=proof.d.ts.map