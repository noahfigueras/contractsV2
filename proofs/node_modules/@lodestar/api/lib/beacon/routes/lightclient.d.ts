import { SyncPeriod, allForks } from "@lodestar/types";
import { ForkName } from "@lodestar/params";
import { ReturnTypes, RoutesData, ReqSerializers, ReqEmpty } from "../../utils/index.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
import { ApiClientResponse } from "../../interfaces.js";
export type Api = {
    /**
     * Returns an array of best updates given a `startPeriod` and `count` number of sync committee period to return.
     * Best is defined by (in order of priority):
     * - Is finalized update
     * - Has most bits
     * - Oldest update
     */
    getUpdates(startPeriod: SyncPeriod, count: number): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            version: ForkName;
            data: allForks.LightClientUpdate;
        }[];
    }>>;
    /**
     * Returns the latest optimistic head update available. Clients should use the SSE type `light_client_optimistic_update`
     * unless to get the very first head update after syncing, or if SSE are not supported by the server.
     */
    getOptimisticUpdate(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            version: ForkName;
            data: allForks.LightClientOptimisticUpdate;
        };
    }>>;
    getFinalityUpdate(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            version: ForkName;
            data: allForks.LightClientFinalityUpdate;
        };
    }>>;
    /**
     * Fetch a bootstrapping state with a proof to a trusted block root.
     * The trusted block root should be fetched with similar means to a weak subjectivity checkpoint.
     * Only block roots for checkpoints are guaranteed to be available.
     */
    getBootstrap(blockRoot: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            version: ForkName;
            data: allForks.LightClientBootstrap;
        };
    }>>;
    /**
     * Returns an array of sync committee hashes based on the provided period and count
     */
    getCommitteeRoot(startPeriod: SyncPeriod, count: number): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: Uint8Array[];
        };
    }>>;
};
/**
 * Define javascript values for each route
 */
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    getUpdates: {
        query: {
            start_period: number;
            count: number;
        };
    };
    getOptimisticUpdate: ReqEmpty;
    getFinalityUpdate: ReqEmpty;
    getBootstrap: {
        params: {
            block_root: string;
        };
    };
    getCommitteeRoot: {
        query: {
            start_period: number;
            count: number;
        };
    };
};
export declare function getReqSerializers(): ReqSerializers<Api, ReqTypes>;
export declare function getReturnTypes(): ReturnTypes<Api>;
//# sourceMappingURL=lightclient.d.ts.map