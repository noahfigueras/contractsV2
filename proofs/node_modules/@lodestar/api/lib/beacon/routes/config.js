import { ByteVectorType, ContainerType } from "@chainsafe/ssz";
import { ssz } from "@lodestar/types";
import { mapValues } from "@lodestar/utils";
import { ArrayOf, reqEmpty, sameType, ContainerData, } from "../../utils/index.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    getDepositContract: { url: "/eth/v1/config/deposit_contract", method: "GET" },
    getForkSchedule: { url: "/eth/v1/config/fork_schedule", method: "GET" },
    getSpec: { url: "/eth/v1/config/spec", method: "GET" },
};
export function getReqSerializers() {
    return mapValues(routesData, () => reqEmpty);
}
/* eslint-disable @typescript-eslint/naming-convention */
export function getReturnTypes() {
    const DepositContract = new ContainerType({
        chainId: ssz.UintNum64,
        address: new ByteVectorType(20),
    }, { jsonCase: "eth2" });
    return {
        getDepositContract: ContainerData(DepositContract),
        getForkSchedule: ContainerData(ArrayOf(ssz.phase0.Fork)),
        getSpec: ContainerData(sameType()),
    };
}
//# sourceMappingURL=config.js.map