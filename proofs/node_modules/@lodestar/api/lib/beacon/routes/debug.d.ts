import { ContainerType, ValueOf } from "@chainsafe/ssz";
import { ForkName } from "@lodestar/params";
import { allForks, Slot, RootHex, StringType } from "@lodestar/types";
import { ReturnTypes, RoutesData, ReqSerializers, ReqEmpty } from "../../utils/index.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
import { ApiClientResponse, ResponseFormat } from "../../interfaces.js";
import { ExecutionOptimistic, StateId } from "./beacon/state.js";
declare const protoNodeSszType: ContainerType<{
    executionPayloadBlockHash: StringType<string>;
    executionPayloadNumber: import("@chainsafe/ssz").UintNumberType;
    executionStatus: StringType<string>;
    slot: import("@chainsafe/ssz").UintNumberType;
    blockRoot: StringType<string>;
    parentRoot: StringType<string>;
    stateRoot: StringType<string>;
    targetRoot: StringType<string>;
    justifiedEpoch: import("@chainsafe/ssz").UintNumberType;
    justifiedRoot: StringType<string>;
    finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
    finalizedRoot: StringType<string>;
    unrealizedJustifiedEpoch: import("@chainsafe/ssz").UintNumberType;
    unrealizedJustifiedRoot: StringType<string>;
    unrealizedFinalizedEpoch: import("@chainsafe/ssz").UintNumberType;
    unrealizedFinalizedRoot: StringType<string>;
    parent: StringType<string>;
    weight: import("@chainsafe/ssz").UintNumberType;
    bestChild: StringType<string>;
    bestDescendant: StringType<string>;
}>;
type ProtoNodeApiType = ValueOf<typeof protoNodeSszType>;
export type Api = {
    /**
     * Retrieves all possible chain heads (leaves of fork choice tree).
     */
    getDebugChainHeads(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: {
                slot: Slot;
                root: RootHex;
            }[];
        };
    }>>;
    /**
     * Retrieves all possible chain heads (leaves of fork choice tree).
     */
    getDebugChainHeadsV2(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: {
                slot: Slot;
                root: RootHex;
                executionOptimistic: ExecutionOptimistic;
            }[];
        };
    }>>;
    /**
     * Dump all ProtoArray's nodes to debug
     */
    getProtoArrayNodes(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: ProtoNodeApiType[];
        };
    }>>;
    /**
     * Get full BeaconState object
     * Returns full BeaconState object for given stateId.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     *
     * @param stateId State identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
     */
    getState(stateId: StateId, format?: "json"): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: allForks.BeaconState;
            executionOptimistic: ExecutionOptimistic;
        };
    }>>;
    getState(stateId: StateId, format: "ssz"): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: Uint8Array;
    }>>;
    getState(stateId: StateId, format?: ResponseFormat): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: Uint8Array | {
            data: allForks.BeaconState;
            executionOptimistic: ExecutionOptimistic;
        };
    }>>;
    /**
     * Get full BeaconState object
     * Returns full BeaconState object for given stateId.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     *
     * @param stateId State identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
     */
    getStateV2(stateId: StateId, format?: "json"): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: allForks.BeaconState;
            executionOptimistic: ExecutionOptimistic;
            version: ForkName;
        };
    }>>;
    getStateV2(stateId: StateId, format: "ssz"): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: Uint8Array;
    }>>;
    getStateV2(stateId: StateId, format?: ResponseFormat): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: Uint8Array | {
            data: allForks.BeaconState;
            executionOptimistic: ExecutionOptimistic;
            version: ForkName;
        };
    }>>;
};
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    getDebugChainHeads: ReqEmpty;
    getDebugChainHeadsV2: ReqEmpty;
    getProtoArrayNodes: ReqEmpty;
    getState: {
        params: {
            state_id: string;
        };
        headers: {
            accept?: string;
        };
    };
    getStateV2: {
        params: {
            state_id: string;
        };
        headers: {
            accept?: string;
        };
    };
};
export declare function getReqSerializers(): ReqSerializers<Api, ReqTypes>;
export declare function getReturnTypes(): ReturnTypes<Api>;
export {};
//# sourceMappingURL=debug.d.ts.map