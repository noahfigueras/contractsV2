import { ChainForkConfig } from "@lodestar/config";
import { phase0 } from "@lodestar/types";
import { ApiClientResponse } from "../../../interfaces.js";
import { HttpStatusCode } from "../../../utils/client/httpStatusCode.js";
import { RoutesData, ReturnTypes } from "../../../utils/index.js";
import * as block from "./block.js";
import * as pool from "./pool.js";
import * as state from "./state.js";
import * as rewards from "./rewards.js";
export * as block from "./block.js";
export * as pool from "./pool.js";
export * as state from "./state.js";
export * as rewards from "./rewards.js";
export { BroadcastValidation } from "./block.js";
export type { BlockId, BlockHeaderResponse } from "./block.js";
export type { AttestationFilters } from "./pool.js";
export type { BlockRewards, SyncCommitteeRewards } from "./rewards.js";
export type { StateId, ValidatorId, ValidatorStatus, ValidatorFilters, CommitteesFilters, FinalityCheckpoints, ValidatorResponse, ValidatorBalance, EpochCommitteeResponse, EpochSyncCommitteeResponse, } from "./state.js";
export type Api = block.Api & pool.Api & state.Api & rewards.Api & {
    getGenesis(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: phase0.Genesis;
        };
    }>>;
};
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    [K in keyof ReturnType<typeof getReqSerializers>]: ReturnType<ReturnType<typeof getReqSerializers>[K]["writeReq"]>;
};
export declare function getReqSerializers(config: ChainForkConfig): {
    getBlockRewards: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId) => Promise<ApiClientResponse<{
        200: {
            data: rewards.BlockRewards;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            block_id: string;
        };
    }>;
    getSyncCommitteeRewards: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId, validatorIds?: state.ValidatorId[] | undefined) => Promise<ApiClientResponse<{
        200: {
            data: rewards.SyncCommitteeRewards;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            block_id: string;
        };
        body: state.ValidatorId[];
    }>;
    getStateRoot: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId) => Promise<ApiClientResponse<{
        200: {
            data: {
                root: Uint8Array;
            };
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: string;
        };
    }>;
    getStateFork: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId) => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: string;
        };
    }>;
    getStateRandao: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, epoch?: number | undefined) => Promise<ApiClientResponse<{
        200: {
            data: {
                randao: Uint8Array;
            };
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: state.StateId;
        };
        query: {
            epoch?: number | undefined;
        };
    }>;
    getStateFinalityCheckpoints: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId) => Promise<ApiClientResponse<{
        200: {
            data: state.FinalityCheckpoints;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: string;
        };
    }>;
    getStateValidators: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, filters?: state.ValidatorFilters | undefined) => Promise<ApiClientResponse<{
        200: {
            data: state.ValidatorResponse[];
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: state.StateId;
        };
        query: {
            id?: state.ValidatorId[] | undefined;
            status?: state.ValidatorStatus[] | undefined;
        };
    }>;
    getStateValidator: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, validatorId: state.ValidatorId) => Promise<ApiClientResponse<{
        200: {
            data: state.ValidatorResponse;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: state.StateId;
            validator_id: state.ValidatorId;
        };
    }>;
    getStateValidatorBalances: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, indices?: state.ValidatorId[] | undefined) => Promise<ApiClientResponse<{
        200: {
            data: state.ValidatorBalance[];
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST>>, {
        params: {
            state_id: state.StateId;
        };
        query: {
            id?: state.ValidatorId[] | undefined;
        };
    }>;
    getEpochCommittees: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, filters?: state.CommitteesFilters | undefined) => Promise<ApiClientResponse<{
        200: {
            data: state.EpochCommitteeResponse[];
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: state.StateId;
        };
        query: {
            slot?: number | undefined;
            epoch?: number | undefined;
            index?: number | undefined;
        };
    }>;
    getEpochSyncCommittees: import("../../../utils/types.js").ReqSerializer<(stateId: state.StateId, epoch?: number | undefined) => Promise<ApiClientResponse<{
        200: {
            data: state.EpochSyncCommitteeResponse;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            state_id: state.StateId;
        };
        query: {
            epoch?: number | undefined;
        };
    }>;
    getPoolAttestations: import("../../../utils/types.js").ReqSerializer<(filters?: Partial<pool.AttestationFilters> | undefined) => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>[];
        };
    }, HttpStatusCode.BAD_REQUEST>>, {
        query: {
            slot?: number | undefined;
            committee_index?: number | undefined;
        };
    }>;
    getPoolAttesterSlashings: import("../../../utils/types.js").ReqSerializer<() => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                attestation1: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: import("@chainsafe/ssz").ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: import("@chainsafe/ssz").ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>[];
        };
    }>>, import("../../../utils/types.js").ReqGeneric>;
    getPoolProposerSlashings: import("../../../utils/types.js").ReqSerializer<() => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                signedHeader1: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>[];
        };
    }>>, import("../../../utils/types.js").ReqGeneric>;
    getPoolVoluntaryExits: import("../../../utils/types.js").ReqSerializer<() => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                message: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>[];
        };
    }>>, import("../../../utils/types.js").ReqGeneric>;
    getPoolBlsToExecutionChanges: import("../../../utils/types.js").ReqSerializer<() => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                message: import("@chainsafe/ssz").ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("@lodestar/types/lib/utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>[];
        };
    }>>, import("../../../utils/types.js").ReqGeneric>;
    submitPoolAttestations: import("../../../utils/types.js").ReqSerializer<(attestations: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: import("@chainsafe/ssz").ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: import("@chainsafe/ssz").ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>[]) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    submitPoolAttesterSlashings: import("../../../utils/types.js").ReqSerializer<(slashing: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        attestation1: import("@chainsafe/ssz").ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: import("@chainsafe/ssz").ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: import("@chainsafe/ssz").ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    submitPoolProposerSlashings: import("../../../utils/types.js").ReqSerializer<(slashing: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        signedHeader1: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: import("@chainsafe/ssz").ContainerType<{
            message: import("@chainsafe/ssz").ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    submitPoolVoluntaryExit: import("../../../utils/types.js").ReqSerializer<(exit: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        message: import("@chainsafe/ssz").ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    submitPoolBlsToExecutionChange: import("../../../utils/types.js").ReqSerializer<(blsToExecutionChange: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        message: import("@chainsafe/ssz").ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("@lodestar/types/lib/utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>[]) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    submitPoolSyncCommitteeSignatures: import("../../../utils/types.js").ReqSerializer<(signatures: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>[]) => Promise<ApiClientResponse<{
        200: void;
    }, HttpStatusCode.BAD_REQUEST>>, {
        body: unknown;
    }>;
    getBlock: import("../../../utils/types.js").ReqSerializer<(<T extends import("../../../interfaces.js").ResponseFormat = "json">(blockId: block.BlockId, format?: T | undefined) => Promise<block.BlockResponse<T>>), {
        params: {
            block_id: string;
        };
        headers: {
            accept?: string | undefined;
        };
    }>;
    getBlockV2: import("../../../utils/types.js").ReqSerializer<(<T_1 extends import("../../../interfaces.js").ResponseFormat = "json">(blockId: block.BlockId, format?: T_1 | undefined) => Promise<block.BlockV2Response<T_1>>), {
        params: {
            block_id: string;
        };
        headers: {
            accept?: string | undefined;
        };
    }>;
    getBlockAttestations: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId) => Promise<ApiClientResponse<{
        200: {
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: import("@chainsafe/ssz").ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: import("@chainsafe/ssz").ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>[];
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            block_id: string;
        };
    }>;
    getBlockHeader: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId) => Promise<ApiClientResponse<{
        200: {
            data: block.BlockHeaderResponse;
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            block_id: string;
        };
    }>;
    getBlockHeaders: import("../../../utils/types.js").ReqSerializer<(filters: Partial<{
        slot: number;
        parentRoot: string;
    }>) => Promise<ApiClientResponse<{
        200: {
            data: block.BlockHeaderResponse[];
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST>>, {
        query: {
            slot?: number | undefined;
            parent_root?: string | undefined;
        };
    }>;
    getBlockRoot: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId) => Promise<ApiClientResponse<{
        200: {
            data: {
                root: Uint8Array;
            };
            executionOptimistic: boolean;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>, {
        params: {
            block_id: string;
        };
    }>;
    publishBlock: import("../../../utils/types.js").ReqSerializer<(blockOrContents: import("@lodestar/types/lib/allForks/types.js").SignedBeaconBlockOrContents) => Promise<ApiClientResponse<{
        200: void;
        202: void;
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.SERVICE_UNAVAILABLE>>, {
        body: unknown;
    }>;
    publishBlockV2: import("../../../utils/types.js").ReqSerializer<(blockOrContents: import("@lodestar/types/lib/allForks/types.js").SignedBeaconBlockOrContents, opts?: {
        broadcastValidation?: block.BroadcastValidation | undefined;
    } | undefined) => Promise<ApiClientResponse<{
        200: void;
        202: void;
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.SERVICE_UNAVAILABLE>>, {
        body: unknown;
        query: {
            broadcast_validation?: string | undefined;
        };
    }>;
    publishBlindedBlock: import("../../../utils/types.js").ReqSerializer<(blindedBlock: import("@lodestar/types/lib/allForks/types.js").SignedBlindedBeaconBlock) => Promise<ApiClientResponse<{
        200: void;
        202: void;
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.SERVICE_UNAVAILABLE>>, {
        body: unknown;
    }>;
    publishBlindedBlockV2: import("../../../utils/types.js").ReqSerializer<(blindedBlockOrContents: import("@lodestar/types/lib/allForks/types.js").SignedBlindedBeaconBlock, opts: {
        broadcastValidation?: block.BroadcastValidation | undefined;
    }) => Promise<ApiClientResponse<{
        200: void;
        202: void;
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.SERVICE_UNAVAILABLE>>, {
        body: unknown;
        query: {
            broadcast_validation?: string | undefined;
        };
    }>;
    getBlobSidecars: import("../../../utils/types.js").ReqSerializer<(blockId: block.BlockId, indices?: number[] | undefined) => Promise<ApiClientResponse<{
        200: {
            executionOptimistic: boolean;
            data: import("@chainsafe/ssz/lib/view/container.js").ValueOfFields<{
                index: import("@chainsafe/ssz").UintNumberType;
                blob: import("@chainsafe/ssz").ByteVectorType;
                kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
                kzgProof: import("@chainsafe/ssz").ByteVectorType;
                signedBlockHeader: import("@chainsafe/ssz").ContainerType<{
                    message: import("@chainsafe/ssz").ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>[];
        };
    }>>, {
        params: {
            block_id: string;
        };
        query: {
            indices?: number[] | undefined;
        };
    }>;
    getGenesis: import("../../../utils/types.js").ReqSerializer<() => void, import("../../../utils/types.js").ReqGeneric>;
};
export declare function getReturnTypes(): ReturnTypes<Api>;
//# sourceMappingURL=index.d.ts.map