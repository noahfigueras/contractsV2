import { ssz } from "@lodestar/types";
import { HttpStatusCode } from "../../../utils/client/httpStatusCode.js";
import { ArrayOf, Schema, reqOnlyBody, reqEmpty, ContainerData, } from "../../../utils/index.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    getPoolAttestations: { url: "/eth/v1/beacon/pool/attestations", method: "GET" },
    getPoolAttesterSlashings: { url: "/eth/v1/beacon/pool/attester_slashings", method: "GET" },
    getPoolProposerSlashings: { url: "/eth/v1/beacon/pool/proposer_slashings", method: "GET" },
    getPoolVoluntaryExits: { url: "/eth/v1/beacon/pool/voluntary_exits", method: "GET" },
    getPoolBlsToExecutionChanges: { url: "/eth/v1/beacon/pool/bls_to_execution_changes", method: "GET" },
    submitPoolAttestations: { url: "/eth/v1/beacon/pool/attestations", method: "POST" },
    submitPoolAttesterSlashings: { url: "/eth/v1/beacon/pool/attester_slashings", method: "POST" },
    submitPoolProposerSlashings: { url: "/eth/v1/beacon/pool/proposer_slashings", method: "POST" },
    submitPoolVoluntaryExit: { url: "/eth/v1/beacon/pool/voluntary_exits", method: "POST" },
    submitPoolBlsToExecutionChange: { url: "/eth/v1/beacon/pool/bls_to_execution_changes", method: "POST" },
    submitPoolSyncCommitteeSignatures: { url: "/eth/v1/beacon/pool/sync_committees", method: "POST" },
};
export function getReqSerializers() {
    return {
        getPoolAttestations: {
            writeReq: (filters) => ({ query: { slot: filters?.slot, committee_index: filters?.committeeIndex } }),
            parseReq: ({ query }) => [{ slot: query.slot, committeeIndex: query.committee_index }],
            schema: { query: { slot: Schema.Uint, committee_index: Schema.Uint } },
        },
        getPoolAttesterSlashings: reqEmpty,
        getPoolProposerSlashings: reqEmpty,
        getPoolVoluntaryExits: reqEmpty,
        getPoolBlsToExecutionChanges: reqEmpty,
        submitPoolAttestations: reqOnlyBody(ArrayOf(ssz.phase0.Attestation), Schema.ObjectArray),
        submitPoolAttesterSlashings: reqOnlyBody(ssz.phase0.AttesterSlashing, Schema.Object),
        submitPoolProposerSlashings: reqOnlyBody(ssz.phase0.ProposerSlashing, Schema.Object),
        submitPoolVoluntaryExit: reqOnlyBody(ssz.phase0.SignedVoluntaryExit, Schema.Object),
        submitPoolBlsToExecutionChange: reqOnlyBody(ArrayOf(ssz.capella.SignedBLSToExecutionChange), Schema.ObjectArray),
        submitPoolSyncCommitteeSignatures: reqOnlyBody(ArrayOf(ssz.altair.SyncCommitteeMessage), Schema.ObjectArray),
    };
}
export function getReturnTypes() {
    return {
        getPoolAttestations: ContainerData(ArrayOf(ssz.phase0.Attestation)),
        getPoolAttesterSlashings: ContainerData(ArrayOf(ssz.phase0.AttesterSlashing)),
        getPoolProposerSlashings: ContainerData(ArrayOf(ssz.phase0.ProposerSlashing)),
        getPoolVoluntaryExits: ContainerData(ArrayOf(ssz.phase0.SignedVoluntaryExit)),
        getPoolBlsToExecutionChanges: ContainerData(ArrayOf(ssz.capella.SignedBLSToExecutionChange)),
    };
}
//# sourceMappingURL=pool.js.map