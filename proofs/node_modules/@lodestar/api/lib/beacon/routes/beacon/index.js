import { ssz } from "@lodestar/types";
import { HttpStatusCode } from "../../../utils/client/httpStatusCode.js";
import { reqEmpty, ContainerData } from "../../../utils/index.js";
import * as block from "./block.js";
import * as pool from "./pool.js";
import * as state from "./state.js";
import * as rewards from "./rewards.js";
// See /packages/api/src/routes/index.ts for reasoning and instructions to add new routes
// NOTE: We choose to split the block, pool, and state namespaces so the files are not too big.
// However, for a consumer all these methods are within the same service "beacon"
export * as block from "./block.js";
export * as pool from "./pool.js";
export * as state from "./state.js";
export * as rewards from "./rewards.js";
export { BroadcastValidation } from "./block.js";
export const routesData = {
    getGenesis: { url: "/eth/v1/beacon/genesis", method: "GET" },
    ...block.routesData,
    ...pool.routesData,
    ...state.routesData,
    ...rewards.routesData,
};
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function getReqSerializers(config) {
    return {
        getGenesis: reqEmpty,
        ...block.getReqSerializers(config),
        ...pool.getReqSerializers(),
        ...state.getReqSerializers(),
        ...rewards.getReqSerializers(),
    };
}
export function getReturnTypes() {
    return {
        getGenesis: ContainerData(ssz.phase0.Genesis),
        ...block.getReturnTypes(),
        ...pool.getReturnTypes(),
        ...state.getReturnTypes(),
        ...rewards.getReturnTypes(),
    };
}
//# sourceMappingURL=index.js.map