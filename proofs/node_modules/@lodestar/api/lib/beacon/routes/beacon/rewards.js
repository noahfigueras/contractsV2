import { ContainerType } from "@chainsafe/ssz";
import { ssz } from "@lodestar/types";
import { Schema, ContainerDataExecutionOptimistic, ArrayOf, } from "../../../utils/index.js";
import { HttpStatusCode } from "../../../utils/client/httpStatusCode.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    getBlockRewards: { url: "/eth/v1/beacon/rewards/blocks/{block_id}", method: "GET" },
    getSyncCommitteeRewards: { url: "/eth/v1/beacon/rewards/sync_committee/{block_id}", method: "POST" },
};
export function getReqSerializers() {
    return {
        getBlockRewards: {
            writeReq: (block_id) => ({ params: { block_id: String(block_id) } }),
            parseReq: ({ params }) => [params.block_id],
            schema: { params: { block_id: Schema.StringRequired } },
        },
        getSyncCommitteeRewards: {
            writeReq: (block_id, validatorIds) => ({ params: { block_id: String(block_id) }, body: validatorIds || [] }),
            parseReq: ({ params, body }) => [params.block_id, body],
            schema: {
                params: { block_id: Schema.StringRequired },
                body: Schema.UintOrStringArray,
            },
        },
    };
}
export function getReturnTypes() {
    const BlockRewardsResponse = new ContainerType({
        proposerIndex: ssz.ValidatorIndex,
        total: ssz.UintNum64,
        attestations: ssz.UintNum64,
        syncAggregate: ssz.UintNum64,
        proposerSlashings: ssz.UintNum64,
        attesterSlashings: ssz.UintNum64,
    }, { jsonCase: "eth2" });
    const SyncCommitteeRewardsResponse = new ContainerType({
        validatorIndex: ssz.ValidatorIndex,
        reward: ssz.UintNum64,
    }, { jsonCase: "eth2" });
    return {
        getBlockRewards: ContainerDataExecutionOptimistic(BlockRewardsResponse),
        getSyncCommitteeRewards: ContainerDataExecutionOptimistic(ArrayOf(SyncCommitteeRewardsResponse)),
    };
}
//# sourceMappingURL=rewards.js.map