import { ValidatorIndex } from "@lodestar/types";
import { RoutesData, ReturnTypes, ReqSerializers } from "../../../utils/index.js";
import { HttpStatusCode } from "../../../utils/client/httpStatusCode.js";
import { ApiClientResponse } from "../../../interfaces.js";
import { BlockId } from "./block.js";
import { ValidatorId } from "./state.js";
/**
 * True if the response references an unverified execution payload. Optimistic information may be invalidated at
 * a later time. If the field is not present, assume the False value.
 */
export type ExecutionOptimistic = boolean;
/**
 * Rewards info for a single block. Every reward value is in Gwei.
 */
export type BlockRewards = {
    /** Proposer of the block, the proposer index who receives these rewards */
    proposerIndex: ValidatorIndex;
    /** Total block reward, equal to attestations + sync_aggregate + proposer_slashings + attester_slashings */
    total: number;
    /** Block reward component due to included attestations */
    attestations: number;
    /** Block reward component due to included sync_aggregate */
    syncAggregate: number;
    /** Block reward component due to included proposer_slashings */
    proposerSlashings: number;
    /** Block reward component due to included attester_slashings */
    attesterSlashings: number;
};
/**
 * Rewards info for sync committee participation. Every reward value is in Gwei.
 * Note: In the case that block proposer is present in `SyncCommitteeRewards`, the reward value only reflects rewards for
 * participating in sync committee. Please refer to `BlockRewards.syncAggregate` for rewards of proposer including sync committee
 * outputs into their block
 */
export type SyncCommitteeRewards = {
    validatorIndex: ValidatorIndex;
    reward: number;
}[];
export type Api = {
    /**
     * Get block rewards
     * Returns the info of rewards received by the block proposer
     *
     * @param blockId Block identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
     */
    getBlockRewards(blockId: BlockId): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: BlockRewards;
            executionOptimistic: ExecutionOptimistic;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>;
    /**
     * Get sync committee rewards
     * Returns participant reward value for each sync committee member at the given block.
     *
     * @param blockId Block identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
     * @param validatorIds List of validator indices or pubkeys to filter in
     */
    getSyncCommitteeRewards(blockId: BlockId, validatorIds?: ValidatorId[]): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: SyncCommitteeRewards;
            executionOptimistic: ExecutionOptimistic;
        };
    }, HttpStatusCode.BAD_REQUEST | HttpStatusCode.NOT_FOUND>>;
};
/**
 * Define javascript values for each route
 */
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    getBlockRewards: {
        params: {
            block_id: string;
        };
    };
    getSyncCommitteeRewards: {
        params: {
            block_id: string;
        };
        body: ValidatorId[];
    };
};
export declare function getReqSerializers(): ReqSerializers<Api, ReqTypes>;
export declare function getReturnTypes(): ReturnTypes<Api>;
//# sourceMappingURL=rewards.d.ts.map