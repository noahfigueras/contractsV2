import { Epoch, RootHex, Slot } from "@lodestar/types";
import { ApiClientResponse } from "../../interfaces.js";
import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
import { ReqEmpty, ReturnTypes, ReqSerializers, RoutesData } from "../../utils/index.js";
import { FilterGetPeers, NodePeer, PeerDirection, PeerState } from "./node.js";
export type SyncChainDebugState = {
    targetRoot: string | null;
    targetSlot: number | null;
    syncType: string;
    status: string;
    startEpoch: number;
    peers: number;
    batches: any[];
};
export type GossipQueueItem = {
    topic: unknown;
    propagationSource: string;
    data: Uint8Array;
    addedTimeMs: number;
    seenTimestampSec: number;
};
export type PeerScoreStat = {
    peerId: string;
    lodestarScore: number;
    gossipScore: number;
    ignoreNegativeGossipScore: boolean;
    score: number;
    lastUpdate: number;
};
export type GossipPeerScoreStat = {
    peerId: string;
};
export type RegenQueueItem = {
    key: string;
    args: unknown;
    addedTimeMs: number;
};
export type BlockProcessorQueueItem = {
    blockSlots: Slot[];
    jobOpts: Record<string, string | number | boolean | undefined>;
    addedTimeMs: number;
};
export type StateCacheItem = {
    slot: Slot;
    root: RootHex;
    /** Total number of reads */
    reads: number;
    /** Unix timestamp (ms) of the last read */
    lastRead: number;
    checkpointState: boolean;
};
export type LodestarNodePeer = NodePeer & {
    agentVersion: string;
};
export type LodestarThreadType = "main" | "network" | "discv5";
export type Api = {
    /** Trigger to write a heapdump of either main/network/discv5 thread to disk at `dirpath`. May take > 1min */
    writeHeapdump(thread?: LodestarThreadType, dirpath?: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: {
                filepath: string;
            };
        };
    }>>;
    /** Trigger to write profile of either main/network/discv5 thread to disk */
    writeProfile(thread?: LodestarThreadType, duration?: number, dirpath?: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: {
                filepath: string;
            };
        };
    }>>;
    /** TODO: description */
    getLatestWeakSubjectivityCheckpointEpoch(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: Epoch;
        };
    }>>;
    /** TODO: description */
    getSyncChainsDebugState(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: SyncChainDebugState[];
        };
    }>>;
    /** Dump all items in a gossip queue, by gossipType */
    getGossipQueueItems(gossipType: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: unknown[];
        };
    }>>;
    /** Dump all items in the regen queue */
    getRegenQueueItems(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: RegenQueueItem[];
        };
    }>>;
    /** Dump all items in the block processor queue */
    getBlockProcessorQueueItems(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: BlockProcessorQueueItem[];
        };
    }>>;
    /** Dump a summary of the states in the StateContextCache */
    getStateCacheItems(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: StateCacheItem[];
        };
    }>>;
    /** Dump peer gossip stats by peer */
    getGossipPeerScoreStats(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: GossipPeerScoreStat[];
        };
    }>>;
    /** Dump lodestar score stats by peer */
    getLodestarPeerScoreStats(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: PeerScoreStat[];
        };
    }>>;
    /** Run GC with `global.gc()` */
    runGC(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: void;
    }>>;
    /** Drop all states in the state cache */
    dropStateCache(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: void;
    }>>;
    /** Connect to peer at this multiaddress */
    connectPeer(peerId: string, multiaddrStrs: string[]): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: void;
    }>>;
    /** Disconnect peer */
    disconnectPeer(peerId: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: void;
    }>>;
    /** Same to node api with new fields */
    getPeers(filters?: FilterGetPeers): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: LodestarNodePeer[];
            meta: {
                count: number;
            };
        };
    }>>;
    /** Dump Discv5 Kad values */
    discv5GetKadValues(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: string[];
        };
    }>>;
    /**
     * Dump level-db entry keys for a given Bucket declared in code, or for all buckets.
     * @param bucket must be the string name of a bucket entry: `allForks_blockArchive`
     */
    dumpDbBucketKeys(bucket: string): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: string[];
        };
    }>>;
    /** Return all entries in the StateArchive index with bucket index_stateArchiveRootIndex */
    dumpDbStateIndex(): Promise<ApiClientResponse<{
        [HttpStatusCode.OK]: {
            data: {
                root: RootHex;
                slot: Slot;
            }[];
        };
    }>>;
};
/**
 * Define javascript values for each route
 */
export declare const routesData: RoutesData<Api>;
export type ReqTypes = {
    writeHeapdump: {
        query: {
            thread?: LodestarThreadType;
            dirpath?: string;
        };
    };
    writeProfile: {
        query: {
            thread?: LodestarThreadType;
            duration?: number;
            dirpath?: string;
        };
    };
    getLatestWeakSubjectivityCheckpointEpoch: ReqEmpty;
    getSyncChainsDebugState: ReqEmpty;
    getGossipQueueItems: {
        params: {
            gossipType: string;
        };
    };
    getRegenQueueItems: ReqEmpty;
    getBlockProcessorQueueItems: ReqEmpty;
    getStateCacheItems: ReqEmpty;
    getGossipPeerScoreStats: ReqEmpty;
    getLodestarPeerScoreStats: ReqEmpty;
    runGC: ReqEmpty;
    dropStateCache: ReqEmpty;
    connectPeer: {
        query: {
            peerId: string;
            multiaddr: string[];
        };
    };
    disconnectPeer: {
        query: {
            peerId: string;
        };
    };
    getPeers: {
        query: {
            state?: PeerState[];
            direction?: PeerDirection[];
        };
    };
    discv5GetKadValues: ReqEmpty;
    dumpDbBucketKeys: {
        params: {
            bucket: string;
        };
    };
    dumpDbStateIndex: ReqEmpty;
};
export declare function getReqSerializers(): ReqSerializers<Api, ReqTypes>;
export declare function getReturnTypes(): ReturnTypes<Api>;
//# sourceMappingURL=lodestar.d.ts.map