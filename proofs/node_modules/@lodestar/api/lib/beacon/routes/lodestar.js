import { HttpStatusCode } from "../../utils/client/httpStatusCode.js";
import { jsonType, reqEmpty, sameType, Schema, } from "../../utils/index.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    writeHeapdump: { url: "/eth/v1/lodestar/write_heapdump", method: "POST" },
    writeProfile: { url: "/eth/v1/lodestar/write_profile", method: "POST" },
    getLatestWeakSubjectivityCheckpointEpoch: { url: "/eth/v1/lodestar/ws_epoch", method: "GET" },
    getSyncChainsDebugState: { url: "/eth/v1/lodestar/sync_chains_debug_state", method: "GET" },
    getGossipQueueItems: { url: "/eth/v1/lodestar/gossip_queue_items/:gossipType", method: "GET" },
    getRegenQueueItems: { url: "/eth/v1/lodestar/regen_queue_items", method: "GET" },
    getBlockProcessorQueueItems: { url: "/eth/v1/lodestar/block_processor_queue_items", method: "GET" },
    getStateCacheItems: { url: "/eth/v1/lodestar/state_cache_items", method: "GET" },
    getGossipPeerScoreStats: { url: "/eth/v1/lodestar/gossip_peer_score_stats", method: "GET" },
    getLodestarPeerScoreStats: { url: "/eth/v1/lodestar/lodestar_peer_score_stats", method: "GET" },
    runGC: { url: "/eth/v1/lodestar/gc", method: "POST" },
    dropStateCache: { url: "/eth/v1/lodestar/drop_state_cache", method: "POST" },
    connectPeer: { url: "/eth/v1/lodestar/connect_peer", method: "POST" },
    disconnectPeer: { url: "/eth/v1/lodestar/disconnect_peer", method: "POST" },
    getPeers: { url: "/eth/v1/lodestar/peers", method: "GET" },
    discv5GetKadValues: { url: "/eth/v1/debug/discv5_kad_values", method: "GET" },
    dumpDbBucketKeys: { url: "/eth/v1/debug/dump_db_bucket_keys/:bucket", method: "GET" },
    dumpDbStateIndex: { url: "/eth/v1/debug/dump_db_state_index", method: "GET" },
};
export function getReqSerializers() {
    return {
        writeHeapdump: {
            writeReq: (thread, dirpath) => ({ query: { thread, dirpath } }),
            parseReq: ({ query }) => [query.thread, query.dirpath],
            schema: { query: { dirpath: Schema.String } },
        },
        writeProfile: {
            writeReq: (thread, duration, dirpath) => ({ query: { thread, duration, dirpath } }),
            parseReq: ({ query }) => [query.thread, query.duration, query.dirpath],
            schema: { query: { dirpath: Schema.String } },
        },
        getLatestWeakSubjectivityCheckpointEpoch: reqEmpty,
        getSyncChainsDebugState: reqEmpty,
        getGossipQueueItems: {
            writeReq: (gossipType) => ({ params: { gossipType } }),
            parseReq: ({ params }) => [params.gossipType],
            schema: { params: { gossipType: Schema.StringRequired } },
        },
        getRegenQueueItems: reqEmpty,
        getBlockProcessorQueueItems: reqEmpty,
        getStateCacheItems: reqEmpty,
        getGossipPeerScoreStats: reqEmpty,
        getLodestarPeerScoreStats: reqEmpty,
        runGC: reqEmpty,
        dropStateCache: reqEmpty,
        connectPeer: {
            writeReq: (peerId, multiaddr) => ({ query: { peerId, multiaddr } }),
            parseReq: ({ query }) => [query.peerId, query.multiaddr],
            schema: { query: { peerId: Schema.StringRequired, multiaddr: Schema.StringArray } },
        },
        disconnectPeer: {
            writeReq: (peerId) => ({ query: { peerId } }),
            parseReq: ({ query }) => [query.peerId],
            schema: { query: { peerId: Schema.StringRequired } },
        },
        getPeers: {
            writeReq: (filters) => ({ query: filters || {} }),
            parseReq: ({ query }) => [query],
            schema: { query: { state: Schema.StringArray, direction: Schema.StringArray } },
        },
        discv5GetKadValues: reqEmpty,
        dumpDbBucketKeys: {
            writeReq: (bucket) => ({ params: { bucket } }),
            parseReq: ({ params }) => [params.bucket],
            schema: { params: { bucket: Schema.String } },
        },
        dumpDbStateIndex: reqEmpty,
    };
}
export function getReturnTypes() {
    return {
        writeHeapdump: sameType(),
        writeProfile: sameType(),
        getLatestWeakSubjectivityCheckpointEpoch: sameType(),
        getSyncChainsDebugState: jsonType("snake"),
        getGossipQueueItems: jsonType("snake"),
        getRegenQueueItems: jsonType("snake"),
        getBlockProcessorQueueItems: jsonType("snake"),
        getStateCacheItems: jsonType("snake"),
        getGossipPeerScoreStats: jsonType("snake"),
        getLodestarPeerScoreStats: jsonType("snake"),
        getPeers: jsonType("snake"),
        discv5GetKadValues: jsonType("snake"),
        dumpDbBucketKeys: sameType(),
        dumpDbStateIndex: sameType(),
    };
}
//# sourceMappingURL=lodestar.js.map