import { routesData, getReturnTypes, getReqSerializers } from "../routes/proof.js";
import { getGenericJsonServer } from "../../utils/server/index.js";
export function getRoutes(config, api) {
    const reqSerializers = getReqSerializers();
    const serverRoutes = getGenericJsonServer({ routesData, getReturnTypes, getReqSerializers }, config, api);
    return {
        // Non-JSON routes. Return binary
        getStateProof: {
            ...serverRoutes.getStateProof,
            handler: async (req) => {
                const args = reqSerializers.getStateProof.parseReq(req);
                const { data } = await api.getStateProof(...args);
                const leaves = data.leaves;
                const response = new Uint8Array(32 * leaves.length);
                for (let i = 0; i < leaves.length; i++) {
                    response.set(leaves[i], i * 32);
                }
                // Fastify 3.x.x will automatically add header `Content-Type: application/octet-stream` if Buffer
                return Buffer.from(response);
            },
        },
        getBlockProof: {
            ...serverRoutes.getBlockProof,
            handler: async (req) => {
                const args = reqSerializers.getBlockProof.parseReq(req);
                const { data } = await api.getBlockProof(...args);
                const leaves = data.leaves;
                const response = new Uint8Array(32 * leaves.length);
                for (let i = 0; i < leaves.length; i++) {
                    response.set(leaves[i], i * 32);
                }
                // Fastify 3.x.x will automatically add header `Content-Type: application/octet-stream` if Buffer
                return Buffer.from(response);
            },
        },
    };
}
//# sourceMappingURL=proof.js.map