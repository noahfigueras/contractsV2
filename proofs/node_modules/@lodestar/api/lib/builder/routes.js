import { fromHexString, toHexString } from "@chainsafe/ssz";
import { ssz } from "@lodestar/types";
import { isForkExecution, isForkBlobs } from "@lodestar/params";
import { Schema, reqOnlyBody, reqEmpty, ArrayOf, WithVersion, } from "../utils/index.js";
// See /packages/api/src/routes/index.ts for reasoning and instructions to add new routes
import { getReqSerializers as getBeaconReqSerializers } from "../beacon/routes/beacon/block.js";
import { HttpStatusCode } from "../utils/client/httpStatusCode.js";
/**
 * Define javascript values for each route
 */
export const routesData = {
    status: { url: "/eth/v1/builder/status", method: "GET" },
    registerValidator: { url: "/eth/v1/builder/validators", method: "POST" },
    getHeader: { url: "/eth/v1/builder/header/{slot}/{parent_hash}/{pubkey}", method: "GET" },
    submitBlindedBlock: { url: "/eth/v1/builder/blinded_blocks", method: "POST" },
};
export function getReqSerializers(config) {
    return {
        status: reqEmpty,
        registerValidator: reqOnlyBody(ArrayOf(ssz.bellatrix.SignedValidatorRegistrationV1), Schema.ObjectArray),
        getHeader: {
            writeReq: (slot, parentHash, proposerPubKey) => ({
                params: { slot, parent_hash: toHexString(parentHash), pubkey: toHexString(proposerPubKey) },
            }),
            parseReq: ({ params }) => [params.slot, fromHexString(params.parent_hash), fromHexString(params.pubkey)],
            schema: {
                params: { slot: Schema.UintRequired, parent_hash: Schema.StringRequired, pubkey: Schema.StringRequired },
            },
        },
        submitBlindedBlock: getBeaconReqSerializers(config)["publishBlindedBlock"],
    };
}
export function getReturnTypes() {
    return {
        getHeader: WithVersion((fork) => isForkExecution(fork) ? ssz.allForksExecution[fork].SignedBuilderBid : ssz.bellatrix.SignedBuilderBid),
        submitBlindedBlock: WithVersion((fork) => isForkBlobs(fork)
            ? ssz.allForksBlobs[fork].ExecutionPayloadAndBlobsBundle
            : isForkExecution(fork)
                ? ssz.allForksExecution[fork].ExecutionPayload
                : ssz.bellatrix.ExecutionPayload),
    };
}
//# sourceMappingURL=routes.js.map