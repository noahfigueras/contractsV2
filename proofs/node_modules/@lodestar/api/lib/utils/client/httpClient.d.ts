import { Logger } from "@lodestar/utils";
import { ReqGeneric, RouteDef } from "../index.js";
import { ApiClientResponse, ApiClientSuccessResponse } from "../../interfaces.js";
import { fetch } from "./fetch.js";
import type { Metrics } from "./metrics.js";
import { HttpStatusCode } from "./httpStatusCode.js";
export declare class HttpError extends Error {
    status: number;
    url: string;
    constructor(message: string, status: number, url: string);
}
export declare class ApiError extends Error {
    status: number;
    operationId: string;
    constructor(message: string, status: number, operationId: string);
    static assert(res: ApiClientResponse, message?: string): asserts res is ApiClientSuccessResponse<any, unknown>;
    toString(): string;
}
export interface URLOpts {
    baseUrl: string;
    timeoutMs?: number;
    bearerToken?: string;
    extraHeaders?: Record<string, string>;
}
export type FetchOpts = {
    url: RouteDef["url"];
    method: RouteDef["method"];
    query?: ReqGeneric["query"];
    body?: ReqGeneric["body"];
    headers?: ReqGeneric["headers"];
    /** Optional, for metrics */
    routeId?: string;
    timeoutMs?: number;
    retries?: number;
};
export interface IHttpClient {
    baseUrl: string;
    json<T>(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: T;
    }>;
    request(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: void;
    }>;
    arrayBuffer(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: ArrayBuffer;
    }>;
}
export type HttpClientOptions = ({
    baseUrl: string;
} | {
    urls: (string | URLOpts)[];
}) & {
    timeoutMs?: number;
    bearerToken?: string;
    extraHeaders?: Record<string, string>;
    /** Return an AbortSignal to be attached to all requests */
    getAbortSignal?: () => AbortSignal | undefined;
    /** Override fetch function */
    fetch?: typeof fetch;
};
export type HttpClientModules = {
    logger?: Logger;
    metrics?: Metrics;
};
export type { Metrics };
export declare class HttpClient implements IHttpClient {
    private readonly globalTimeoutMs;
    private readonly globalBearerToken;
    private readonly globalExtraHeaders;
    private readonly getAbortSignal?;
    private readonly fetch;
    private readonly metrics;
    private readonly logger;
    private readonly urlsOpts;
    private readonly urlsScore;
    get baseUrl(): string;
    /**
     * timeoutMs = config.params.SECONDS_PER_SLOT * 1000
     */
    constructor(opts: HttpClientOptions, { logger, metrics }?: HttpClientModules);
    json<T>(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: T;
    }>;
    request(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: void;
    }>;
    arrayBuffer(opts: FetchOpts): Promise<{
        status: HttpStatusCode;
        body: ArrayBuffer;
    }>;
    private requestWithBodyWithRetries;
    private requestWithBodyWithFallbacks;
    private requestWithBody;
}
//# sourceMappingURL=httpClient.d.ts.map